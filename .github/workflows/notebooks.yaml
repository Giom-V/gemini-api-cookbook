# Notebook-related checks

name: Notebooks

on:
  # Relevant PRs
  pull_request:
    paths:
    - "**.ipynb"
  # Allow manual runs
  workflow_dispatch:

jobs:
  # Format all notebooks.
  nbfmt:
    name: Notebook format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get *full* history
    - uses: actions/setup-python@v4
    - name: Install tensorflow-docs
      run: python3 -m pip install -U git+https://github.com/tensorflow/docs
    - name: Fetch main branch
      run: git fetch -u origin main:main
    - name: Check notebook formatting
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # Only check notebooks modified in this pull request
          base_commit=$(git merge-base HEAD ${{ github.event.pull_request.base.sha }})
          readarray -t changed_notebooks < <(git diff --name-only "${base_commit}...HEAD" "*.ipynb")
        else
          # Manual run, check everything
          readarray -t changed_notebooks < <(find -name '*.ipynb')
        fi
        if [[ ${#changed_notebooks[@]} == 0 ]]; then
          echo "No notebooks modified in this pull request."
          exit 0
        else
          echo "Check formatting with nbfmt:"
          python3 -m tensorflow_docs.tools.nbfmt --test "${changed_notebooks[@]}"
        fi

  nblint:
    name: Notebook lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get *full* history
    - uses: actions/setup-python@v4
    - name: Install tensorflow-docs
      run: python3 -m pip install -U git+https://github.com/tensorflow/docs
    - name: Fetch main branch
      run: git fetch -u origin main:main

    # Lint for all notebooks
    - name: Lint notebooks
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # Only check notebooks modified in this pull request
          base_commit=$(git merge-base HEAD ${{ github.event.pull_request.base.sha }})
          # Output paths relative to repo root, e.g., folder/file.ipynb
          readarray -t changed_notebooks < <(git diff --name-only "${base_commit}...HEAD" "*.ipynb" | grep -v 'gemini-2/' || true)
        else
          # Manual run, check everything
          # Use find -printf "%P" to remove leading ./
          readarray -t changed_notebooks < <(find . -name '*.ipynb' -printf "%P\n" | grep -v 'gemini-2/' || true)
        fi

        echo "Debug: Initial changed notebooks: ${changed_notebooks[*]}"

        # Define files to exclude from linting (no commas within or at the end of lines)
        excluded_files=(
          "examples/Object_detection.ipynb"
          "quickstarts/Template.ipynb"
        )
        echo "Debug: Excluded files patterns: ${excluded_files[*]}"

        # Filter out excluded files from the changed_notebooks array
        filtered_notebooks=()
        for notebook in "${changed_notebooks[@]}"; do
          # Skip empty lines that might result from command substitution if no files are found
          if [[ -z "$notebook" ]]; then
            continue
          fi
          exclude=false
          normalized_notebook="${notebook#./}" # Ensure no leading ./ for comparison
          echo "Debug: Processing notebook: '$notebook' (normalized: '$normalized_notebook')"
          for excluded_file_pattern in "${excluded_files[@]}"; do
            echo "Debug:   Comparing '$normalized_notebook' with excluded pattern: '$excluded_file_pattern'"
            if [[ "$normalized_notebook" == "$excluded_file_pattern" ]]; then
              echo "Debug:     Match! Excluding '$notebook'"
              exclude=true
              break
            fi
          done
          if [[ "$exclude" == false ]]; then
            echo "Debug:   No exclusion match. Adding '$notebook' to lint list."
            filtered_notebooks+=("$notebook")
          fi
        done

        echo "Debug: Filtered notebooks for linting: ${filtered_notebooks[*]}"

        if [[ ${#filtered_notebooks[@]} == 0 ]]; then
          echo "No website notebooks modified or all modified notebooks were excluded." # Updated message
          exit 0
        else
          echo "WARNING: If the button_colab check fails for you, make sure you have <table class=\"tfo-notebook-buttons\"...>"
          echo "Lint check with nblint:"
          python3 -m tensorflow_docs.tools.nblint \
            --styles=google,gemini_cookbook \
            --arg=repo:google-gemini/cookbook \
            --arg=branch:main \
            --exclude_lint=gemini_cookbook::button_download \
            --exclude_lint=gemini_cookbook::button_website \
            --arg=base_url:https://ai.google.dev/ \
            --exclude_lint=gemini_cookbook::button_github \
            "${filtered_notebooks[@]}"
        fi
